{"version":3,"sources":["helpers/index.js","pages/Transactions/components/ItemTransaction.js"],"names":["convertMoney","price","currency","convert","BRL","value","currencylib","symbol","separator","decimal","precision","formatWithSymbol","USD","format","cashbackCalculate","transactions","amount","feedback_score","forEach","trans","seller_feedback_score","price_value","cashback_percentage","cashback_amount","average_feedback_score","length","useStyles","makeStyles","theme","root","flexGrow","category","fontSize","color","palette","text","secondary","product","fontWeight","percentage","success","dark","ItemTransaction","transaction","classes","price_currency","useMemo","button","alt","charAt","container","direction","justify","item","xs","lg","component","noWrap","className","align"],"mappings":"0HAAA,0FAEaA,EAAe,SAACC,GAA6B,IAAtBC,EAAqB,uDAAV,MACvCC,EAAU,CACdC,IAAK,SAACC,GAAD,OACHC,IAAYD,EAAO,CACjBE,OAAQ,MACRC,UAAW,IACXC,QAAS,IACTC,UAAW,EACXC,kBAAkB,KAEtBC,IAAK,SAACP,GAAD,OACHC,IAAYD,EAAO,CACjBE,OAAQ,KACRC,UAAW,IACXC,QAAS,IACTC,UAAW,MAEfR,GACF,OAAOC,EAAQF,GAAOY,UAGXC,EAAoB,SAACC,GAChC,IAAIC,EAAS,EACTC,EAAiB,EAMrB,OALAF,EAAaG,SAAQ,SAACC,GAAW,IACvBC,EAA4DD,EAA5DC,sBAAuBC,EAAqCF,EAArCE,YAAaC,EAAwBH,EAAxBG,oBAC5CN,GAAUK,EAAcC,EACxBL,GAAkBG,KAEb,CACLG,gBAAiBvB,EAAagB,GAC9BQ,uBAAwBP,EAAiBF,EAAaU,U,gCCjC1D,0FAUMC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,SAAU,CACRC,SAAU,QACVC,MAAOL,EAAMM,QAAQC,KAAKC,WAE5BC,QAAS,CACPL,SAAU,QACVM,WAAY,QAEdrC,MAAO,CACLqC,WAAY,QAEdC,WAAY,CACVD,WAAY,OACZN,SAAU,QACVC,MAAOL,EAAMM,QAAQM,QAAQC,UA+ClBC,UA3CS,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACnBC,EAAUlB,IACRW,EAAwEM,EAAxEN,QAASN,EAA+DY,EAA/DZ,SAAUT,EAAqDqB,EAArDrB,oBAAqBuB,EAAgCF,EAAhCE,eAAgBxB,EAAgBsB,EAAhBtB,YAC1DpB,EAAQ6C,mBAAQ,kBAAM9C,YAAaqB,EAAawB,KAAiB,CAACxB,IACxE,OACE,oCACE,kBAAC,IAAD,CAAU0B,QAAM,GACd,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQC,IAAKjB,GAAWA,EAASkB,OAAO,KAE1C,kBAAC,IAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAQ,iBACtC,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAG,QACnB,kBAAC,IAAD,CAAYC,UAAU,IAAIC,QAAM,EAACxB,MAAM,QAAQyB,UAAWd,EAAQb,UAC/DA,GAEH,kBAAC,IAAD,CAAYyB,UAAU,IAAIE,UAAWd,EAAQP,SAC1CA,IAGL,kBAAC,IAAD,CAAMgB,MAAI,GACR,kBAAC,IAAD,CAAYG,UAAU,IAAIG,MAAM,QAAQD,UAAWd,EAAQ3C,OACxDA,GAEH,kBAAC,IAAD,CAAYuD,UAAU,IAAIG,MAAM,QAAQD,UAAWd,EAAQL,YACxDjB,EADH","file":"static/js/5.f824ceb6.chunk.js","sourcesContent":["import currencylib from 'currency.js';\n\nexport const convertMoney = (price, currency = 'BRL') => {\n  const convert = {\n    BRL: (value) =>\n      currencylib(value, {\n        symbol: 'R$ ',\n        separator: '.',\n        decimal: ',',\n        precision: 2,\n        formatWithSymbol: true,\n      }),\n    USD: (value) =>\n      currencylib(value, {\n        symbol: '$ ',\n        separator: '.',\n        decimal: ',',\n        precision: 2,\n      }),\n  }[currency];\n  return convert(price).format();\n};\n\nexport const cashbackCalculate = (transactions) => {\n  let amount = 0.0;\n  let feedback_score = 0;\n  transactions.forEach((trans) => {\n    const { seller_feedback_score, price_value, cashback_percentage } = trans;\n    amount += price_value * cashback_percentage;\n    feedback_score += seller_feedback_score;\n  });\n  return {\n    cashback_amount: convertMoney(amount),\n    average_feedback_score: feedback_score / transactions.length,\n  };\n};\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { convertMoney } from 'helpers';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  category: {\n    fontSize: '0.9em',\n    color: theme.palette.text.secondary,\n  },\n  product: {\n    fontSize: '1.1em',\n    fontWeight: 'bold',\n  },\n  price: {\n    fontWeight: 'bold',\n  },\n  percentage: {\n    fontWeight: 'bold',\n    fontSize: '0.9em',\n    color: theme.palette.success.dark,\n  },\n}));\n\nconst ItemTransaction = ({ transaction }) => {\n  const classes = useStyles();\n  const { product, category, cashback_percentage, price_currency, price_value } = transaction;\n  const price = useMemo(() => convertMoney(price_value, price_currency), [price_value]);\n  return (\n    <>\n      <ListItem button>\n        <ListItemAvatar>\n          <Avatar alt={category}>{category.charAt(0)}</Avatar>\n        </ListItemAvatar>\n        <Grid container direction=\"row\" justify=\"space-between\">\n          <Grid item xs={6} lg=\"auto\">\n            <Typography component=\"p\" noWrap color=\"light\" className={classes.category}>\n              {category}\n            </Typography>\n            <Typography component=\"p\" className={classes.product}>\n              {product}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Typography component=\"p\" align=\"right\" className={classes.price}>\n              {price}\n            </Typography>\n            <Typography component=\"p\" align=\"right\" className={classes.percentage}>\n              {cashback_percentage}% de volta\n            </Typography>\n          </Grid>\n        </Grid>\n      </ListItem>\n    </>\n  );\n};\n\nItemTransaction.propTypes = {\n  transaction: PropTypes.shape({\n    category: PropTypes.string,\n    product: PropTypes.string,\n    cashback_percentage: PropTypes.number,\n    price_currency: PropTypes.string,\n    price_value: PropTypes.number,\n  }),\n};\n\nexport default ItemTransaction;\n"],"sourceRoot":""}