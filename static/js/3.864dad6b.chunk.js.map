{"version":3,"sources":["pages/Transactions/components/ItemTransaction.js","helpers/index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","category","fontSize","color","palette","text","secondary","product","fontWeight","price","percentage","success","dark","ItemTransaction","transaction","classes","cashback_percentage","price_currency","price_value","useMemo","currency","convert","BRL","value","currencylib","symbol","separator","decimal","precision","formatWithSymbol","USD","format","convertMoney","ListItem","button","ListItemAvatar","Avatar","alt","charAt","Grid","container","direction","justify","item","xs","lg","Typography","component","noWrap","className","align"],"mappings":"4NAUMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,SAAU,CACRC,SAAU,QACVC,MAAOL,EAAMM,QAAQC,KAAKC,WAE5BC,QAAS,CACPL,SAAU,QACVM,WAAY,QAEdC,MAAO,CACLD,WAAY,QAEdE,WAAY,CACVF,WAAY,OACZN,SAAU,QACVC,MAAOL,EAAMM,QAAQO,QAAQC,UA+ClBC,UA3CS,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACnBC,EAAUnB,IACRW,EAAwEO,EAAxEP,QAASN,EAA+Da,EAA/Db,SAAUe,EAAqDF,EAArDE,oBAAqBC,EAAgCH,EAAhCG,eAAgBC,EAAgBJ,EAAhBI,YAC1DT,EAAQU,mBAAQ,kBCjCI,WAA8B,IAA7BC,EAA4B,uDAAjB,MAAOX,EAAU,uCACjDY,EAAU,CACdC,IAAK,SAACC,GAAD,OACHC,IAAYD,EAAO,CACjBE,OAAQ,MACRC,UAAW,IACXC,QAAS,IACTC,UAAW,EACXC,kBAAkB,KAEtBC,IAAK,SAACP,GAAD,OACHC,IAAYD,EAAO,CACjBE,OAAQ,KACRC,UAAW,IACXC,QAAS,IACTC,UAAW,MAEfR,GACF,OAAOC,EAAQZ,GAAOsB,SDeMC,CAAaf,EAAgBC,KAAc,CAACA,IACxE,OACE,oCACE,kBAACe,EAAA,EAAD,CAAUC,QAAM,GACd,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,IAAKpC,GAAWA,EAASqC,OAAO,KAE1C,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAQ,iBACtC,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGC,GAAG,QACnB,kBAACC,EAAA,EAAD,CAAYC,UAAU,IAAIC,QAAM,EAAC7C,MAAM,QAAQ8C,UAAWlC,EAAQd,UAC/DA,GAEH,kBAAC6C,EAAA,EAAD,CAAYC,UAAU,IAAIE,UAAWlC,EAAQR,SAC1CA,IAGL,kBAACgC,EAAA,EAAD,CAAMI,MAAI,GACR,kBAACG,EAAA,EAAD,CAAYC,UAAU,IAAIG,MAAM,QAAQD,UAAWlC,EAAQN,OACxDA,GAEH,kBAACqC,EAAA,EAAD,CAAYC,UAAU,IAAIG,MAAM,QAAQD,UAAWlC,EAAQL,YACxDM,EADH","file":"static/js/3.864dad6b.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { convertMoney } from 'helpers';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  category: {\n    fontSize: '0.9em',\n    color: theme.palette.text.secondary,\n  },\n  product: {\n    fontSize: '1.1em',\n    fontWeight: 'bold',\n  },\n  price: {\n    fontWeight: 'bold',\n  },\n  percentage: {\n    fontWeight: 'bold',\n    fontSize: '0.9em',\n    color: theme.palette.success.dark,\n  },\n}));\n\nconst ItemTransaction = ({ transaction }) => {\n  const classes = useStyles();\n  const { product, category, cashback_percentage, price_currency, price_value } = transaction;\n  const price = useMemo(() => convertMoney(price_currency, price_value), [price_value]);\n  return (\n    <>\n      <ListItem button>\n        <ListItemAvatar>\n          <Avatar alt={category}>{category.charAt(0)}</Avatar>\n        </ListItemAvatar>\n        <Grid container direction=\"row\" justify=\"space-between\">\n          <Grid item xs={6} lg=\"auto\">\n            <Typography component=\"p\" noWrap color=\"light\" className={classes.category}>\n              {category}\n            </Typography>\n            <Typography component=\"p\" className={classes.product}>\n              {product}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Typography component=\"p\" align=\"right\" className={classes.price}>\n              {price}\n            </Typography>\n            <Typography component=\"p\" align=\"right\" className={classes.percentage}>\n              {cashback_percentage}% de volta\n            </Typography>\n          </Grid>\n        </Grid>\n      </ListItem>\n    </>\n  );\n};\n\nItemTransaction.propTypes = {\n  transaction: PropTypes.shape({\n    category: PropTypes.string,\n    product: PropTypes.string,\n    cashback_percentage: PropTypes.number,\n    price_currency: PropTypes.string,\n    price_value: PropTypes.number,\n  }),\n};\n\nexport default ItemTransaction;\n","import currencylib from 'currency.js';\n\nexport const convertMoney = (currency = 'USD', price) => {\n  const convert = {\n    BRL: (value) =>\n      currencylib(value, {\n        symbol: 'R$ ',\n        separator: '.',\n        decimal: ',',\n        precision: 2,\n        formatWithSymbol: true,\n      }),\n    USD: (value) =>\n      currencylib(value, {\n        symbol: '$ ',\n        separator: '.',\n        decimal: ',',\n        precision: 2,\n      }),\n  }[currency];\n  return convert(price).format();\n};\n"],"sourceRoot":""}