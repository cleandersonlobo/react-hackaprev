{"version":3,"sources":["helpers/index.js","pages/Transactions/styles.js","pages/Transactions/components/ItemTransaction.js","pages/Transactions/components/ListTransactions.js"],"names":["moment","locale","convertMoney","price","currency","convert","BRL","value","currencylib","symbol","separator","decimal","precision","formatWithSymbol","USD","format","cashbackCalculate","transactions","amount","feedback_score","forEach","trans","seller_feedback_score","price_value","cashback_percentage","cashback_amount","average_feedback_score","length","formatTransactionDate","pubDate","toUpperCase","BoxDivider","styled","div","useStyles","makeStyles","theme","root","flexGrow","category","fontSize","color","palette","text","secondary","product","fontWeight","percentage","success","main","ItemTransaction","transaction","classes","price_currency","date","useMemo","dateFormat","container","style","paddingLeft","paddingRight","justify","item","component","align","className","alt","charAt","direction","xs","lg","noWrap","ListTransactions","useContext","ClienteContenxt","client","map","Fragment","key","orientation"],"mappings":"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","file":"static/js/4.ed59bbf6.chunk.js","sourcesContent":["import currencylib from 'currency.js';\nimport moment from 'moment';\nimport 'moment/locale/pt-br';\n\nmoment.locale('pt-br');\nexport const convertMoney = (price, currency = 'BRL') => {\n  const convert = {\n    BRL: (value) =>\n      currencylib(value, {\n        symbol: 'R$ ',\n        separator: '.',\n        decimal: ',',\n        precision: 2,\n        formatWithSymbol: true,\n      }),\n    USD: (value) =>\n      currencylib(value, {\n        symbol: '$ ',\n        separator: '.',\n        decimal: ',',\n        precision: 2,\n      }),\n  }[currency];\n  return convert(price).format();\n};\n\nexport const cashbackCalculate = (transactions) => {\n  let amount = 0.0;\n  let feedback_score = 0;\n  transactions.forEach((trans) => {\n    const { seller_feedback_score, price_value, cashback_percentage } = trans;\n    amount += price_value * cashback_percentage;\n    feedback_score += seller_feedback_score;\n  });\n  return {\n    cashback_amount: convertMoney(amount),\n    average_feedback_score: feedback_score / transactions.length,\n  };\n};\n\nexport const formatTransactionDate = (pubDate) =>\n  moment(pubDate).format('DD MMM YYYY').toUpperCase();\n","import styled from 'styled-components';\n\nexport const BoxDivider = styled.div`\n  display: flex;\n  height: 30px;\n  width: 56px;\n  justify-content: center;\n  padding-left: 16px;\n  :last-child {\n    display: none;\n  }\n`;\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { convertMoney, formatTransactionDate } from 'helpers';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  category: {\n    fontSize: '0.9em',\n    color: theme.palette.text.secondary,\n  },\n  product: {\n    fontSize: '1.1em',\n    fontWeight: 'bold',\n  },\n  price: {\n    fontWeight: 'bold',\n  },\n  percentage: {\n    fontWeight: 'bold',\n    fontSize: '0.9em',\n    color: theme.palette.success.main,\n  },\n}));\n\nconst ItemTransaction = ({ transaction }) => {\n  const classes = useStyles();\n  const {\n    product,\n    category,\n    cashback_percentage,\n    price_currency,\n    price_value,\n    seller_feedback_score,\n    date,\n  } = transaction;\n  const price = useMemo(() => convertMoney(price_value, price_currency), []);\n  const dateFormat = useMemo(() => formatTransactionDate(date), []);\n  return (\n    <>\n      <Grid container style={{ paddingLeft: 20, paddingRight: 20 }} justify=\"space-between\">\n        <Grid item>\n          <Typography component=\"p\" align=\"right\" className={classes.category}>\n            {dateFormat}\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Typography component=\"p\" align=\"right\" className={classes.category}>\n            +{seller_feedback_score} pontos\n          </Typography>\n        </Grid>\n      </Grid>\n      <ListItem>\n        <ListItemAvatar>\n          <Avatar alt={category}>{category.charAt(0)}</Avatar>\n        </ListItemAvatar>\n        <Grid container direction=\"row\" justify=\"space-between\">\n          <Grid item xs={6} lg=\"auto\">\n            <Typography component=\"p\" noWrap className={classes.category}>\n              {category}\n            </Typography>\n            <Typography component=\"p\" className={classes.product}>\n              {product}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Typography component=\"p\" align=\"right\" className={classes.price}>\n              {price}\n            </Typography>\n            <Typography component=\"p\" align=\"right\" className={classes.percentage}>\n              {cashback_percentage}% de volta\n            </Typography>\n          </Grid>\n        </Grid>\n      </ListItem>\n    </>\n  );\n};\n\nItemTransaction.propTypes = {\n  transaction: PropTypes.shape({\n    category: PropTypes.string,\n    product: PropTypes.string,\n    cashback_percentage: PropTypes.number,\n    price_currency: PropTypes.string,\n    price_value: PropTypes.number,\n    seller_feedback_score: PropTypes.number,\n    date: PropTypes.string,\n  }),\n};\n\nexport default ItemTransaction;\n","import React, { useContext } from 'react';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport { ClienteContenxt } from 'contexts';\nimport { BoxDivider } from '../styles';\nimport ItemTransaction from './ItemTransaction';\n\nconst ListTransactions = () => {\n  const { client = null } = useContext(ClienteContenxt);\n  if (!client) return null;\n  const { transactions } = client;\n  return (\n    <List>\n      {transactions.map((trans) => (\n        <React.Fragment key={`${trans.product}-${trans.date}`}>\n          <ItemTransaction transaction={trans} />\n          <BoxDivider>\n            <Divider orientation=\"vertical\" />\n          </BoxDivider>\n        </React.Fragment>\n      ))}\n    </List>\n  );\n};\n\nListTransactions.propTypes = {};\n\nexport default ListTransactions;\n"],"sourceRoot":""}